{"/home/travis/build/npmtest/node-npmtest-grunt-init/test.js":"/* istanbul instrument in package npmtest_grunt_init */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-init/lib.npmtest_grunt_init.js":"/* istanbul instrument in package npmtest_grunt_init */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_init = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_init = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-init/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-init && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_init */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_init\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_init.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_init.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_init.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_init.__dirname + '/lib.npmtest_grunt_init.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-init/node_modules/grunt-init/Gruntfile.js":"/*\n * grunt-init\n * https://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'bin/grunt-init',\n        'tasks/**/*.js',\n        'init/*.js',\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js']\n    }\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  // Whenever the \"test\" task is run, run some tests.\n  grunt.registerTask('test', 'nodeunit');\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n};","/home/travis/build/npmtest/node-npmtest-grunt-init/node_modules/grunt-init/tasks/init.js":"/*\n * grunt-init\n * https://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Nodejs libs.\n  var path = require('path');\n\n  // External libs.\n  var semver = require('semver');\n  var _ = require('lodash');\n\n  // Internal libs.\n  var git = require('./lib/git').init(grunt);\n  var helpers = require('./lib/helpers').init(grunt);\n  var prompt = require('./lib/prompt').init(grunt, helpers);\n\n  // The \"init\" task needs separate delimiters to avoid conflicts, so the <>\n  // are replaced with {}. Otherwise, they behave the same.\n  grunt.template.addDelimiters('init', '{%', '%}');\n\n  // ==========================================================================\n  // TASKS\n  // ==========================================================================\n\n  grunt.registerInitTask('init', 'Generate project scaffolding from a template.', function() {\n    // Extra arguments will be applied to the template file.\n    var args = grunt.util.toArray(arguments);\n    // Initialize searchDirs so template assets can be found.\n    var name = helpers.initSearchDirs(args.shift());\n\n    // Valid init templates (.js or .coffee files).\n    var templates = helpers.getTemplates();\n    var initTemplate = templates[name];\n\n    // Abort if a valid template was not specified.\n    if (!initTemplate) {\n      if (name) {\n        grunt.log.write('Loading \"' + name + '\" init template...').error();\n      }\n      grunt.log.writeln('\\nA valid init template name must be specified.');\n      grunt.help.initTemplates();\n      grunt.help.initWidths();\n      grunt.help.templates();\n      grunt.help.footer();\n      if (name) {\n        grunt.log.writeln();\n        grunt.fatal('A valid init template name must be specified.');\n      } else {\n        process.exit();\n      }\n    }\n\n    // Give the user a little help.\n    grunt.log.writelns(\n      'This task will create one or more files in the current directory, ' +\n      'based on the environment and the answers to a few questions. ' +\n      'Note that answering \"?\" to any question will show question-specific ' +\n      'help and answering \"none\" to most questions will leave its value blank.'\n    );\n\n    // Abort if matching files or directories were found (to avoid accidentally\n    // nuking them).\n    if (initTemplate.warnOn && grunt.file.expand(initTemplate.warnOn).length > 0) {\n      grunt.log.writeln();\n      grunt.warn('Existing files may be overwritten!');\n    }\n\n    // Built-in prompt options.\n    // These generally follow the node \"prompt\" module convention, except:\n    // * The \"default\" value can be a function which is executed at run-time.\n    // * An optional \"sanitize\" function has been added to post-process data.\n    _.extend(prompt.prompts, {\n      name: {\n        message: 'Project name',\n        default: function(value, data, done) {\n          var types = ['javascript', 'js'];\n          if (data.type) { types.push(data.type); }\n          var type = '(?:' + types.join('|') + ')';\n          // This regexp matches:\n          //   leading type- type. type_\n          //   trailing -type .type _type and/or -js .js _js\n          var re = new RegExp('^' + type + '[\\\\-\\\\._]?|(?:[\\\\-\\\\._]?' + type + ')?(?:[\\\\-\\\\._]?js)?$', 'ig');\n          // Strip the above stuff from the current dirname.\n          var name = path.basename(process.cwd()).replace(re, '');\n          // Remove anything not a letter, number, dash, dot or underscore.\n          name = name.replace(/[^\\w\\-\\.]/g, '');\n          done(null, name);\n        },\n        validator: /^[\\w\\-\\.]+$/,\n        warning: 'Must be only letters, numbers, dashes, dots or underscores.',\n        sanitize: function(value, data, done) {\n          // An additional value, safe to use as a JavaScript identifier.\n          data.js_safe_name = value.replace(/[\\W_]+/g, '_').replace(/^(\\d)/, '_$1');\n          // An additional value that won't conflict with NodeUnit unit tests.\n          data.js_test_safe_name = data.js_safe_name === 'test' ? 'myTest' : data.js_safe_name;\n          // If no value is passed to `done`, the original property isn't modified.\n          done();\n        }\n      },\n      title: {\n        message: 'Project title',\n        default: function(value, data, done) {\n          var title = data.name || '';\n          title = title.replace(/[\\W_]+/g, ' ');\n          title = title.replace(/\\w+/g, function(word) {\n            return word[0].toUpperCase() + word.slice(1).toLowerCase();\n          });\n          done(null, title);\n        },\n        warning: 'May consist of any characters.'\n      },\n      description: {\n        message: 'Description',\n        default: 'The best project ever.',\n        warning: 'May consist of any characters.'\n      },\n      version: {\n        message: 'Version',\n        default: function(value, data, done) {\n          // Get a valid semver tag from `git describe --tags` if possible.\n          grunt.util.spawn({\n            cmd: 'git',\n            args: ['describe', '--tags'],\n            fallback: ''\n          }, function(err, result) {\n            result = String(result).split('-')[0];\n            done(null, semver.valid(result) || '0.1.0');\n          });\n        },\n        validator: semver.valid,\n        warning: 'Must be a valid semantic version (semver.org).'\n      },\n      repository: {\n        message: 'Project git repository',\n        default: function(value, data, done) {\n          // Change any git@...:... uri to git://.../... format.\n          git.origin(function(err, result) {\n            if (err) {\n              // Attempt to pull the data from the user's git config.\n              git.config('github.user', function (err, user) {\n                if (err) {\n                  // Attempt to guess at the repo user name. Maybe we'll get lucky!\n                  user = process.env.USER || process.env.USERNAME || '???';\n                }\n                // Save as git_user for sanitize step.\n                data.git_user = user;\n                result = 'git://github.com/' + user + '/' +\n                  path.basename(process.cwd()) + '.git';\n                done(null, result);\n              });\n            } else {\n              result = result.replace(/^git@([^:]+):/, 'git://$1/');\n              done(null, result);\n            }\n          });\n        },\n        sanitize: function(value, data, done) {\n          // An additional computed \"git_user\" property.\n          var repo = git.githubUrl(data.repository);\n          var parts;\n          if (repo != null) {\n            parts = repo.split('/');\n            data.git_user = data.git_user || parts[parts.length - 2];\n            data.git_repo = parts[parts.length - 1];\n            done();\n          } else {\n            data.git_user = data.git_user || '';\n            data.git_repo = path.basename(process.cwd());\n            done();\n          }\n        },\n        warning: 'Should be a public git:// URI.'\n      },\n      homepage: {\n        message: 'Project homepage',\n        // If GitHub is the origin, the (potential) homepage is easy to figure out.\n        default: function(value, data, done) {\n          done(null, git.githubUrl(data.repository) || 'none');\n        },\n        warning: 'Should be a public URL.'\n      },\n      bugs: {\n        message: 'Project issues tracker',\n        // If GitHub is the origin, the issues tracker is easy to figure out.\n        default: function(value, data, done) {\n          done(null, git.githubUrl(data.repository, 'issues') || 'none');\n        },\n        warning: 'Should be a public URL.'\n      },\n      licenses: {\n        message: 'Licenses',\n        default: 'MIT',\n        validator: /^[\\w\\-\\.\\d]+(?:\\s+[\\w\\-\\.\\d]+)*$/,\n        warning: 'Must be zero or more space-separated licenses. Built-in ' +\n          'licenses are: ' + helpers.availableLicenses().join(' ') + ', but you may ' +\n          'specify any number of custom licenses.',\n        // Split the string on spaces.\n        sanitize: function(value, data, done) { done(value.split(/\\s+/)); }\n      },\n      author_name: {\n        message: 'Author name',\n        default: function(value, data, done) {\n          // Attempt to pull the data from the user's git config.\n          grunt.util.spawn({\n            cmd: 'git',\n            args: ['config', '--get', 'user.name'],\n            fallback: 'none'\n          }, done);\n        },\n        warning: 'May consist of any characters.'\n      },\n      author_email: {\n        message: 'Author email',\n        default: function(value, data, done) {\n          // Attempt to pull the data from the user's git config.\n          grunt.util.spawn({\n            cmd: 'git',\n            args: ['config', '--get', 'user.email'],\n            fallback: 'none'\n          }, done);\n        },\n        warning: 'Should be a valid email address.'\n      },\n      author_url: {\n        message: 'Author url',\n        default: 'none',\n        warning: 'Should be a public URL.'\n      },\n      jquery_version: {\n        message: 'Required jQuery version',\n        default: '*',\n        warning: 'Must be a valid semantic version range descriptor.'\n      },\n      node_version: {\n        message: 'What versions of node does it run on?',\n        // TODO: pull from grunt's package.json\n        default: '>= 0.10.0',\n        warning: 'Must be a valid semantic version range descriptor.'\n      },\n      main: {\n        message: 'Main module/entry point',\n        default: function(value, data, done) {\n          done(null, 'lib/' + data.name);\n        },\n        warning: 'Must be a path relative to the project root.'\n      },\n      bin: {\n        message: 'CLI script',\n        default: function(value, data, done) {\n          done(null, 'bin/' + data.name);\n        },\n        warning: 'Must be a path relative to the project root.'\n      },\n      npm_test: {\n        message: 'Npm test command',\n        default: 'grunt',\n        warning: 'Must be an executable command.'\n      },\n      grunt_version: {\n        message: 'What versions of grunt does it require?',\n        default: '~' + grunt.version,\n        warning: 'Must be a valid semantic version range descriptor.'\n      }\n    });\n\n    // This task is asynchronous.\n    var taskDone = this.async();\n\n    var pathPrefix = name + '/root/';\n\n    // Useful init sub-task-specific utilities.\n    var init = _.extend(helpers, {\n      // Expose prompt interface on init object.\n      process: prompt.process,\n      prompt: prompt.prompt,\n      prompts: prompt.prompts,\n      // Expose any user-specified default init values.\n      defaults: helpers.readDefaults('defaults.json'),\n      // Expose rename rules for this template.\n      renames: helpers.readDefaults(name, 'rename.json'),\n      // Return an object containing files to copy with their absolute source path\n      // and relative destination path, renamed (or omitted) according to rules in\n      // rename.json (if it exists).\n      filesToCopy: function(props) {\n        var files = {};\n        // Include all template files by default.\n        helpers.expand({filter: 'isFile', dot: true}, [pathPrefix + '**']).forEach(function(obj) {\n          // Get the source filepath relative to the template root.\n          var src = obj.rel.slice(pathPrefix.length);\n          // Get the destination filepath.\n          var dest = init.renames[src];\n          // Create a property for this file, but use src if dest evaulates\n          // to false\n          var processed = (dest) ? grunt.template.process(dest, {data: props, delimiters: 'init'}) : false;\n          processed = (processed === 'false' || processed === '') ? false : processed;\n          files[(processed) ? processed : src] = obj.rel;\n        });\n        // Exclude files with a value of false in rename.json.\n        var exclusions = Object.keys(init.renames).filter(function(key) {\n          var processed = (init.renames[key]) ? \n            grunt.template.process(init.renames[key], {data: props, delimiters: 'init'}) : false;\n          processed = (processed === 'false' || processed === '') ? false : processed;\n          return (processed === false);\n        }).map(function(key) {\n          return pathPrefix + key;\n        });\n        // Exclude all exclusion files by deleting them from the files object.\n        if (exclusions.length > 0) {\n          helpers.expand({filter: 'isFile', dot: true}, exclusions).forEach(function(obj) {\n            // Get the source filepath relative to the template root.\n            var src = obj.rel.slice(pathPrefix.length);\n            // And remove that file from the files list.\n            delete files[src];\n          });\n        }\n        return files;\n      },\n      // Search init template paths for filename.\n      srcpath: function(arg1) {\n        if (arg1 == null) { return null; }\n        var args = [name, 'root'].concat(grunt.util.toArray(arguments));\n        return helpers.getFile.apply(helpers, args);\n      },\n      // Determine absolute destination file path.\n      destpath: path.join.bind(path, process.cwd()),\n      // Given some number of licenses, add properly-named license files to the\n      // files object.\n      addLicenseFiles: function(files, licenses) {\n        licenses.forEach(function(license) {\n          var fileobj = helpers.expand({filter: 'isFile'}, 'licenses/LICENSE-' + license)[0];\n          if(fileobj) {\n            files['LICENSE-' + license] = fileobj.rel;\n          }\n        });\n      },\n      // Given an absolute or relative source path, and an optional relative\n      // destination path, copy a file, optionally processing it through the\n      // passed callback.\n      copy: function(srcpath, destpath, options) {\n        // Destpath is optional.\n        if (typeof destpath !== 'string') {\n          options = destpath;\n          destpath = srcpath;\n        }\n        // Ensure srcpath is absolute.\n        if (!grunt.file.isPathAbsolute(srcpath)) {\n          srcpath = init.srcpath(srcpath);\n        }\n        // Use placeholder file if no src exists.\n        if (!srcpath) {\n          srcpath = helpers.getFile('misc/placeholder');\n        }\n        grunt.verbose.or.write('Writing ' + destpath + '...');\n        try {\n          grunt.file.copy(srcpath, init.destpath(destpath), options);\n          grunt.verbose.or.ok();\n        } catch(e) {\n          grunt.verbose.or.error().error(e);\n          throw e;\n        }\n      },\n      // Iterate over all files in the passed object, copying the source file to\n      // the destination, processing the contents.\n      copyAndProcess: function(files, props, options) {\n        options = _.defaults(options || {}, {\n          process: function(contents) {\n            return grunt.template.process(contents, {data: props, delimiters: 'init'});\n          }\n        });\n        Object.keys(files).forEach(function(destpath) {\n          var o = Object.create(options);\n          var srcpath = files[destpath];\n          // If srcpath is relative, match it against options.noProcess if\n          // necessary, then make srcpath absolute.\n          var relpath;\n          if (srcpath && !grunt.file.isPathAbsolute(srcpath)) {\n            if (o.noProcess) {\n              relpath = srcpath.slice(pathPrefix.length);\n              o.noProcess = grunt.file.isMatch({matchBase: true}, o.noProcess, relpath);\n            }\n            srcpath = helpers.getFile(srcpath);\n          }\n          // Copy!\n          init.copy(srcpath, destpath, o);\n        });\n      },\n      // Save a package.json file in the destination directory. The callback\n      // can be used to post-process properties to add/remove/whatever.\n      writePackageJSON: function(filename, props, callback) {\n        var pkg = {};\n        // Basic values.\n        ['name', 'title', 'description', 'version', 'homepage'].forEach(function(prop) {\n          if (prop in props) { pkg[prop] = props[prop]; }\n        });\n        // Author.\n        var hasAuthor = Object.keys(props).some(function(prop) {\n          return (/^author_/).test(prop);\n        });\n        if (hasAuthor) {\n          pkg.author = {};\n          ['name', 'email', 'url'].forEach(function(prop) {\n            if (props['author_' + prop]) {\n              pkg.author[prop] = props['author_' + prop];\n            }\n          });\n        }\n        // Other stuff.\n        if ('repository' in props) {\n          // Detect whether repository was given as string or object\n          if (typeof props.repository === 'string') {\n            pkg.repository = {type: 'git', url: props.repository};\n          } else {\n            pkg.repository = props.repository;\n          }\n        }\n        if ('bugs' in props) { pkg.bugs = {url: props.bugs}; }\n        if (props.licenses) {\n          pkg.licenses = props.licenses.map(function(license) {\n            return {type: license, url: props.homepage + '/blob/master/LICENSE-' + license};\n          });\n        }\n\n        // Node/npm-specific (?)\n        if (props.main) { pkg.main = props.main; }\n        if (props.bin) { pkg.bin = props.bin; }\n        if (props.engines) { pkg.engines = props.engines; }\n        else if (props.node_version) { pkg.engines = {node: props.node_version}; }\n        if (props.scripts) { pkg.scripts = props.scripts; }\n        if (props.npm_test) {\n          pkg.scripts = pkg.scripts || {};\n          pkg.scripts.test = props.npm_test;\n          if (props.npm_test.split(' ')[0] === 'grunt') {\n            if (!props.devDependencies) { props.devDependencies = {}; }\n            if (!props.devDependencies.grunt) {\n              props.devDependencies.grunt = '~' + grunt.version;\n            }\n          }\n        }\n\n        if (props.dependencies) { pkg.dependencies = props.dependencies; }\n        if (props.devDependencies) { pkg.devDependencies = props.devDependencies; }\n        if (props.peerDependencies) { pkg.peerDependencies = props.peerDependencies; }\n        if (props.keywords) { pkg.keywords = props.keywords; }\n\n        // Allow final tweaks to the pkg object.\n        if (callback) { pkg = callback(pkg, props); }\n\n        // Write file.\n        grunt.verbose.or.write('Writing ' + filename + '...');\n        try {\n          grunt.file.write(init.destpath(filename), JSON.stringify(pkg, null, 2));\n          grunt.verbose.or.ok();\n        } catch(e) {\n          grunt.verbose.or.error().error(e);\n          throw e;\n        }\n      }\n    });\n\n    // Make args available as flags.\n    init.flags = {};\n    args.forEach(function(flag) { init.flags[flag] = true; });\n\n    // Show any template-specific notes.\n    if (initTemplate.notes) {\n      grunt.log.subhead('\"' + name + '\" template notes:').writelns(initTemplate.notes);\n    }\n\n    // Execute template code, passing in the init object, done function, and any\n    // other arguments specified after the init:name:???.\n    initTemplate.template.apply(this, [grunt, init, function() {\n      // Fail task if errors were logged.\n      if (grunt.task.current.errorCount) { taskDone(false); }\n      // Otherwise, print a success message.\n      grunt.log.subhead('Initialized from template \"' + name + '\".');\n      // Show any template-specific notes.\n      if (initTemplate.after) {\n        grunt.log.writelns(initTemplate.after);\n      }\n      // All done!\n      taskDone();\n    }].concat(args));\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-init/node_modules/grunt-init/tasks/lib/git.js":"/*\n * grunt-init\n * https://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nexports.init = function(grunt) {\n  var exports = {};\n\n  // Get the git origin url from the current repo (if possible).\n  exports.origin = function(done) {\n    grunt.util.spawn({\n      cmd: 'git',\n      args: ['remote', '-v']\n    }, function(err, result) {\n      var re = /^origin\\s/;\n      var lines;\n      if (!err) {\n        lines = String(result).split('\\n').filter(re.test, re);\n        if (lines.length > 0) {\n          done(null, lines[0].split(/\\s/)[1]);\n          return;\n        }\n      }\n      done(true, 'none');\n    });\n  };\n\n  // Generate a GitHub web URL from a GitHub repo URI.\n  var githubUrlRegex = /^.+(?:@|:\\/\\/)(github.com)[:\\/](.+?)(?:\\.git|\\/)?$/;\n  exports.githubUrl = function(uri, suffix) {\n    var matches = githubUrlRegex.exec(uri);\n    if (!matches) { return null; }\n    var url = 'https://' + matches[1] + '/' + matches[2];\n    if (suffix) {\n      url += '/' + suffix.replace(/^\\//, '');\n    }\n    return url;\n  };\n\n  // Get the given key from the git config, if it exists.\n  exports.config = function(key, done) {\n    grunt.util.spawn({\n      cmd: 'git',\n      args: ['config', '--get', key]\n    }, function(err, result) {\n      if (err) {\n        done(true, 'none');\n        return;\n      }\n      done(null, String(result));\n    });\n  };\n\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-init/node_modules/grunt-init/tasks/lib/helpers.js":"/*\n * grunt-init\n * https://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nexports.init = function(grunt) {\n  var exports = {};\n\n  // Nodejs libs.\n  var path = require('path');\n  var _ = require('lodash');\n\n  // Windows?\n  var win32 = process.platform === 'win32';\n\n  // Access files in the user's \".grunt-init\" folder.\n  exports.userDir = function() {\n    var dirpath = path.join.apply(path, arguments);\n    var homepath = process.env[win32 ? 'USERPROFILE' : 'HOME'];\n    return path.resolve(homepath, '.grunt-init', dirpath);\n  };\n\n  // An array of all available license files.\n  exports.availableLicenses = function() {\n    return exports.expand({filter: 'isFile'}, 'licenses/*').map(function(obj) {\n      return path.basename(String(obj)).replace(/^LICENSE-/, '');\n    });\n  };\n\n  // Return an array of all task-specific file paths that match the given\n  // wildcard patterns. Instead of returing a string for each file path, return\n  // an object with useful properties. When coerced to String, each object will\n  // yield its absolute path.\n  exports.expand = function() {\n    var args = grunt.util.toArray(arguments);\n    // If the first argument is an options object, remove and save it for later.\n    var options = grunt.util.kindOf(args[0]) === 'object' ? args.shift() : {};\n    // Use the first argument if it's an Array, otherwise convert the arguments\n    // object to an array and use that.\n    var patterns = Array.isArray(args[0]) ? args[0] : args;\n    var filepaths = {};\n    // When any returned array item is used in a string context, return the\n    // absolute path.\n    var toString = function() { return this.abs; };\n    // Iterate over all searchDirs.\n    exports.searchDirs.forEach(function(dirpath) {\n      var opts = Object.create(options);\n      // Set the cwd so the grunt.file.expand* method can match relatively.\n      opts.cwd = dirpath;\n      // Create an array of absolute patterns, preceded by the options object.\n      var args = [opts].concat(patterns);\n      // Expand the paths in case a wildcard was passed.\n      grunt.file.expand.apply(null, args).forEach(function(relpath) {\n        if (relpath in filepaths) { return; }\n        // Update object at this relpath only if it doesn't already exist.\n        filepaths[relpath] = {\n          abs: dirpath + '/' + relpath,\n          rel: relpath,\n          base: dirpath,\n          toString: toString\n        };\n      });\n    });\n    // Return an array of objects.\n    return Object.keys(filepaths).map(function(relpath) {\n      return filepaths[relpath];\n    });\n  };\n\n  // Get all templates.\n  exports.getTemplates = function() {\n    var templates = {};\n    exports.expand({filter: 'isFile'}, '*/template.{js,coffee}').forEach(function(fileobj) {\n      templates[fileobj.rel.split('/')[0]] = require(fileobj.abs);\n    });\n    return templates;\n  };\n\n  // Get a single task file path.\n  exports.getFile = function() {\n    var filepath = path.join.apply(path, arguments);\n    var fileobj = exports.expand(filepath)[0];\n    return fileobj ? String(fileobj) : null;\n  };\n\n  exports.searchDirs = [];\n\n  // Initialize searchDirs.\n  exports.initSearchDirs = function(name) {\n    exports.searchDirs = [];\n    // Add dirname of specified template file to searchDirs.\n    if (name && grunt.file.exists(name)) {\n      exports.searchDirs.push(path.dirname(name));\n      name = path.basename(path.resolve(name), '.js');\n    }\n    // Add ~/.grunt-init/ to searchDirs.\n    var initdir = exports.userDir();\n    if (initdir && grunt.file.exists(initdir)) {\n      exports.searchDirs.push(initdir);\n    }\n    // Add internal templates to searchDirs.\n    exports.searchDirs.push(path.resolve(__dirname, '../../templates'));\n\n    // Search dirs should be unique and fully normalized absolute paths.\n    exports.searchDirs = _.uniq(exports.searchDirs).map(function(filepath) {\n      return path.resolve(filepath);\n    });\n\n    return name;\n  };\n\n  // Read JSON defaults from task files (if they exist), merging them into one.\n  // data object.\n  var readDefaults = {};\n  exports.readDefaults = function() {\n    var filepath = path.join.apply(path, arguments);\n    var result = readDefaults[filepath];\n    var filepaths;\n    if (!result) {\n      result = readDefaults[filepath] = {};\n      // Find all matching taskfiles.\n      filepaths = exports.searchDirs.map(function(dirpath) {\n        return path.join(dirpath, filepath);\n      }).filter(function(filepath) {\n        return grunt.file.isFile(filepath);\n      });\n      // Load defaults data.\n      if (filepaths.length) {\n        grunt.verbose.subhead('Loading data from ' + filepath);\n        // Since extras path order goes from most-specific to least-specific, only\n        // add-in properties that don't already exist.\n        filepaths.forEach(function(filepath) {\n          _.defaults(result, grunt.file.readJSON(filepath));\n        });\n      }\n    }\n    return result;\n  };\n\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-init/node_modules/grunt-init/tasks/lib/prompt.js":"/*\n * grunt-init\n * https://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n// External lib.\nvar _ = require('lodash');\nvar async = require('async');\nvar prompt = require('prompt');\nprompt.message = '[' + '?'.green + ']';\nprompt.delimiter = ' ';\n\nexports.init = function(grunt, helpers) {\n  var exports = {};\n\n  // Expose prompts object so that prompts can be added or modified.\n  exports.prompts = {};\n  var useDefaults = grunt.option('default');\n\n  // Prompt user to override default values passed in obj.\n  exports.process = function(defaults, options, done) {\n    // If defaults are omitted, shuffle arguments a bit.\n    if (grunt.util.kindOf(defaults) === 'array') {\n      done = options;\n      options = defaults;\n      defaults = {};\n    }\n\n    // Keep track of any \"sanitize\" functions for later use.\n    var sanitize = {};\n    options.forEach(function(option) {\n      if (option.sanitize) {\n        sanitize[option.name] = option.sanitize;\n      }\n    });\n\n    // Add one final \"are you sure?\" prompt.\n    if (options.length > 0) {\n      options.push({\n        message: 'Do you need to make any changes to the above before continuing?'.green,\n        name: 'ANSWERS_VALID',\n        default: 'y/N'\n      });\n    }\n\n    // Ask user for input. This is in an IIFE because it has to execute at least\n    // once, and might be repeated.\n    (function ask() {\n      if (useDefaults) {\n        grunt.log.subhead('Using defaults...');\n      } else {\n        grunt.log.subhead('Please answer the following:');\n      }\n      var result = _.clone(defaults);\n      // Loop over each prompt option.\n      async.forEachSeries(options, function(option, done) {\n        var defaultValue;\n        async.forEachSeries(['default', 'altDefault'], function(prop, next) {\n          if (typeof option[prop] === 'function') {\n            // If the value is a function, execute that function, using the\n            // value passed into the return callback as the new default value.\n            option[prop](defaultValue, result, function(err, value) {\n              defaultValue = String(value);\n              next();\n            });\n          } else {\n            // Otherwise, if the value actually exists, use it.\n            if (prop in option) {\n              defaultValue = option[prop];\n            }\n            next();\n          }\n        }, function() {\n          // Handle errors (there should never be errors).\n          option.default = defaultValue;\n          delete option.altDefault;\n          // Wrap validator so that answering '?' always fails.\n          var validator = option.validator;\n          option.validator = function(line, next) {\n            if (line === '?') {\n              return next(false);\n            } else if (validator) {\n              if (validator.test) {\n                return next(validator.test(line));\n              } else if (typeof validator === 'function') {\n                return validator.length < 2 ? next(validator(line)) : validator(line, next);\n              }\n            }\n            next(true);\n          };\n          // Actually get user input.\n          if (useDefaults) {\n            result[option.name] = option.default;\n            done();\n          } else {\n            prompt.start();\n            prompt.getInput(option, function(err, line) {\n              if (err) { return done(err); }\n              option.validator = validator;\n              result[option.name] = line;\n              done();\n            });\n          }\n        });\n      }, function() {\n        // After all prompt questions have been answered...\n        if (/n/i.test(result.ANSWERS_VALID)) {\n          // User accepted all answers. Suspend prompt.\n          prompt.pause();\n          // Clean up.\n          delete result.ANSWERS_VALID;\n          // Iterate over all results.\n          async.forEachSeries(Object.keys(result), function(name, next) {\n            // If this value needs to be sanitized, process it now.\n            if (sanitize[name]) {\n              sanitize[name](result[name], result, function(err, value) {\n                if (err) {\n                  result[name] = err;\n                } else if (arguments.length === 2) {\n                  result[name] = value === 'none' ? '' : value;\n                }\n                next();\n              });\n            } else {\n              if (result[name] === 'none') { result[name] = ''; }\n              next();\n            }\n          }, function(err) {\n            // Done!\n            grunt.log.writeln();\n            done(err, result);\n          });\n        } else {\n          // Otherwise update the default value for each user prompt option...\n          options.slice(0, -1).forEach(function(option) {\n            option.default = result[option.name];\n          });\n          // ...and start over again.\n          ask();\n        }\n      });\n    }());\n  };\n\n  // Commonly-used prompt options with meaningful default values.\n  exports.prompt = function(name, altDefault) {\n    // Clone the option so the original options object doesn't get modified.\n    var option = _.clone(exports.prompts[name] || {});\n    option.name = name;\n\n    var defaults = helpers.readDefaults('defaults.json');\n    if (name in defaults) {\n      // A user default was specified for this option, so use its value.\n      option.default = defaults[name];\n    } else if (arguments.length === 2) {\n      // An alternate default was specified, so use it.\n      option.altDefault = altDefault;\n    }\n    return option;\n  };\n\n  return exports;\n};\n"}